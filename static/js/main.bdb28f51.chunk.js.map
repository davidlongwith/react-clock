{"version":3,"sources":["lib.js","Clock.js","serviceWorker.js","index.js"],"names":["civilianHours","clockTime","hours","appendAMPM","ampm","prependZero","key","compose","fns","arg","reduce","composed","f","getClockTime","Date","date","getHours","minutes","getMinutes","seconds","getSeconds","civilianTime","Clock","state","console","log","this","ticking","setInterval","setState","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAQaA,EAAgB,SAAAC,GAAS,sBACjCA,EADiC,CAEpCC,MAAOD,EAAUC,MAAQ,GAAKD,EAAUC,MAAQ,GAAKD,EAAUC,SAGpDC,EAAa,SAAAF,GAAS,sBAC9BA,EAD8B,CAEjCG,KAAMH,EAAUC,OAAS,GAAK,KAAO,QAG1BG,EAAc,SAAAC,GAAG,OAAI,SAAAL,GAAS,sBACtCA,EADsC,eAExCK,EAAML,EAAUK,GAAO,GAAK,IAAML,EAAUK,GAAOL,EAAUK,OAGnDC,EAAU,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAY,SAAAC,GAAG,OACpCD,EAAIE,QAAO,SAACC,EAAUC,GAAX,OAAiBA,EAAED,KAAWF,KAY9BI,EAAeN,GApCL,kBAAM,IAAIO,QAEA,SAAAC,GAAI,MAAK,CACxCb,MAAOa,EAAKC,WACZC,QAASF,EAAKG,aACdC,QAASJ,EAAKK,gBAkCdjB,GAbmC,SAAAF,GAAS,OAC5CM,EAAQJ,EAAYH,EAApBO,CAAmCN,MAET,SAAAoB,GAAY,OACtCd,EACEF,EAAY,SACZA,EAAY,WACZA,EAAY,WAHdE,CAIEc,MC7BiBC,E,YACnB,aAAe,IAAD,8BACZ,+CACKC,MAAQV,IAFD,E,iFAKO,IAAD,OAClBW,QAAQC,IAAI,kBACZC,KAAKC,QAAUC,aAAY,kBAAM,EAAKC,SAAShB,OAAiB,O,+BAGxD,IAAD,EACmCa,KAAKH,MAAvCrB,EADD,EACCA,MAAOe,EADR,EACQA,QAASE,EADjB,EACiBA,QAASf,EAD1B,EAC0BA,KACjC,OACE,yBAAK0B,UAAU,SACb,8BAAO5B,GACP,mCACA,8BAAOe,GACP,mCACA,8BAAOE,GACP,0BAAMW,UAAU,QAAQ1B,Q,GApBG2B,aCOfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SD6H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bdb28f51.chunk.js","sourcesContent":["const getCurrentTime = () => new Date();\r\n\r\nexport const abstractClockTime = date => ({\r\n  hours: date.getHours(),\r\n  minutes: date.getMinutes(),\r\n  seconds: date.getSeconds()\r\n});\r\n\r\nexport const civilianHours = clockTime => ({\r\n  ...clockTime,\r\n  hours: clockTime.hours > 12 ? clockTime.hours - 12 : clockTime.hours\r\n});\r\n\r\nexport const appendAMPM = clockTime => ({\r\n  ...clockTime,\r\n  ampm: clockTime.hours >= 12 ? \"PM\" : \"AM\"\r\n});\r\n\r\nexport const prependZero = key => clockTime => ({\r\n  ...clockTime,\r\n  [key]: clockTime[key] < 10 ? \"0\" + clockTime[key] : clockTime[key]\r\n});\r\n\r\nexport const compose = (...fns) => arg =>\r\n  fns.reduce((composed, f) => f(composed), arg);\r\n\r\nexport const convertToCivilianTime = clockTime =>\r\n  compose(appendAMPM, civilianHours)(clockTime);\r\n\r\nexport const doubleDigits = civilianTime =>\r\n  compose(\r\n    prependZero(\"hours\"),\r\n    prependZero(\"minutes\"),\r\n    prependZero(\"seconds\")\r\n  )(civilianTime);\r\n\r\nexport const getClockTime = compose(\r\n  getCurrentTime,\r\n  abstractClockTime,\r\n  appendAMPM,\r\n  convertToCivilianTime,\r\n  doubleDigits\r\n);\r\n","import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport \"./css/Clock.css\";\r\nimport { getClockTime } from \"./lib\";\r\n\r\nexport default class Clock extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = getClockTime();\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"Starting Clock\");\r\n    this.ticking = setInterval(() => this.setState(getClockTime()), 1000);\r\n  }\r\n\r\n  render() {\r\n    const { hours, minutes, seconds, ampm } = this.state;\r\n    return (\r\n      <div className=\"clock\">\r\n        <span>{hours}</span>\r\n        <span>:</span>\r\n        <span>{minutes}</span>\r\n        <span>:</span>\r\n        <span>{seconds}</span>\r\n        <span className=\"ampm\">{ampm}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport Clock from \"./Clock\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Clock />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}